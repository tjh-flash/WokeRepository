// Generated by gencpp from file haptic_bridge/SwitchAxisRequest.msg
// DO NOT EDIT!


#ifndef HAPTIC_BRIDGE_MESSAGE_SWITCHAXISREQUEST_H
#define HAPTIC_BRIDGE_MESSAGE_SWITCHAXISREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace haptic_bridge
{
template <class ContainerAllocator>
struct SwitchAxisRequest_
{
  typedef SwitchAxisRequest_<ContainerAllocator> Type;

  SwitchAxisRequest_()
    : Axis_X(0)
    , Axis_Y(0)
    , Axis_Z(0)
    , Axis_A(0)
    , Axis_B(0)
    , Axis_C(0)  {
    }
  SwitchAxisRequest_(const ContainerAllocator& _alloc)
    : Axis_X(0)
    , Axis_Y(0)
    , Axis_Z(0)
    , Axis_A(0)
    , Axis_B(0)
    , Axis_C(0)  {
  (void)_alloc;
    }



   typedef int8_t _Axis_X_type;
  _Axis_X_type Axis_X;

   typedef int8_t _Axis_Y_type;
  _Axis_Y_type Axis_Y;

   typedef int8_t _Axis_Z_type;
  _Axis_Z_type Axis_Z;

   typedef int8_t _Axis_A_type;
  _Axis_A_type Axis_A;

   typedef int8_t _Axis_B_type;
  _Axis_B_type Axis_B;

   typedef int8_t _Axis_C_type;
  _Axis_C_type Axis_C;





  typedef boost::shared_ptr< ::haptic_bridge::SwitchAxisRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::haptic_bridge::SwitchAxisRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SwitchAxisRequest_

typedef ::haptic_bridge::SwitchAxisRequest_<std::allocator<void> > SwitchAxisRequest;

typedef boost::shared_ptr< ::haptic_bridge::SwitchAxisRequest > SwitchAxisRequestPtr;
typedef boost::shared_ptr< ::haptic_bridge::SwitchAxisRequest const> SwitchAxisRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::haptic_bridge::SwitchAxisRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::haptic_bridge::SwitchAxisRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace haptic_bridge

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::haptic_bridge::SwitchAxisRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::haptic_bridge::SwitchAxisRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::haptic_bridge::SwitchAxisRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::haptic_bridge::SwitchAxisRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::haptic_bridge::SwitchAxisRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::haptic_bridge::SwitchAxisRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::haptic_bridge::SwitchAxisRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d49f586c863effd36097bed82b38127a";
  }

  static const char* value(const ::haptic_bridge::SwitchAxisRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd49f586c863effd3ULL;
  static const uint64_t static_value2 = 0x6097bed82b38127aULL;
};

template<class ContainerAllocator>
struct DataType< ::haptic_bridge::SwitchAxisRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "haptic_bridge/SwitchAxisRequest";
  }

  static const char* value(const ::haptic_bridge::SwitchAxisRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::haptic_bridge::SwitchAxisRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 Axis_X\n\
int8 Axis_Y\n\
int8 Axis_Z\n\
int8 Axis_A\n\
int8 Axis_B\n\
int8 Axis_C\n\
";
  }

  static const char* value(const ::haptic_bridge::SwitchAxisRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::haptic_bridge::SwitchAxisRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Axis_X);
      stream.next(m.Axis_Y);
      stream.next(m.Axis_Z);
      stream.next(m.Axis_A);
      stream.next(m.Axis_B);
      stream.next(m.Axis_C);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SwitchAxisRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::haptic_bridge::SwitchAxisRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::haptic_bridge::SwitchAxisRequest_<ContainerAllocator>& v)
  {
    s << indent << "Axis_X: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Axis_X);
    s << indent << "Axis_Y: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Axis_Y);
    s << indent << "Axis_Z: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Axis_Z);
    s << indent << "Axis_A: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Axis_A);
    s << indent << "Axis_B: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Axis_B);
    s << indent << "Axis_C: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Axis_C);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAPTIC_BRIDGE_MESSAGE_SWITCHAXISREQUEST_H
