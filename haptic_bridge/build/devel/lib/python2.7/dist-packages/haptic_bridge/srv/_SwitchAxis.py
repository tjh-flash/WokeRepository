# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from haptic_bridge/SwitchAxisRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SwitchAxisRequest(genpy.Message):
  _md5sum = "d49f586c863effd36097bed82b38127a"
  _type = "haptic_bridge/SwitchAxisRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int8 Axis_X
int8 Axis_Y
int8 Axis_Z
int8 Axis_A
int8 Axis_B
int8 Axis_C
"""
  __slots__ = ['Axis_X','Axis_Y','Axis_Z','Axis_A','Axis_B','Axis_C']
  _slot_types = ['int8','int8','int8','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Axis_X,Axis_Y,Axis_Z,Axis_A,Axis_B,Axis_C

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SwitchAxisRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Axis_X is None:
        self.Axis_X = 0
      if self.Axis_Y is None:
        self.Axis_Y = 0
      if self.Axis_Z is None:
        self.Axis_Z = 0
      if self.Axis_A is None:
        self.Axis_A = 0
      if self.Axis_B is None:
        self.Axis_B = 0
      if self.Axis_C is None:
        self.Axis_C = 0
    else:
      self.Axis_X = 0
      self.Axis_Y = 0
      self.Axis_Z = 0
      self.Axis_A = 0
      self.Axis_B = 0
      self.Axis_C = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6b().pack(_x.Axis_X, _x.Axis_Y, _x.Axis_Z, _x.Axis_A, _x.Axis_B, _x.Axis_C))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.Axis_X, _x.Axis_Y, _x.Axis_Z, _x.Axis_A, _x.Axis_B, _x.Axis_C,) = _get_struct_6b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6b().pack(_x.Axis_X, _x.Axis_Y, _x.Axis_Z, _x.Axis_A, _x.Axis_B, _x.Axis_C))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.Axis_X, _x.Axis_Y, _x.Axis_Z, _x.Axis_A, _x.Axis_B, _x.Axis_C,) = _get_struct_6b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6b = None
def _get_struct_6b():
    global _struct_6b
    if _struct_6b is None:
        _struct_6b = struct.Struct("<6b")
    return _struct_6b
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from haptic_bridge/SwitchAxisResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SwitchAxisResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "haptic_bridge/SwitchAxisResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SwitchAxisResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class SwitchAxis(object):
  _type          = 'haptic_bridge/SwitchAxis'
  _md5sum = 'd49f586c863effd36097bed82b38127a'
  _request_class  = SwitchAxisRequest
  _response_class = SwitchAxisResponse
