/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "midRosInterface_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




JointPt::~JointPt() throw() {
}


void JointPt::__set_robotId(const int32_t val) {
  this->robotId = val;
}

void JointPt::__set_sequence(const int32_t val) {
  this->sequence = val;
}

void JointPt::__set_time(const int32_t val) {
  this->time = val;
}

void JointPt::__set_pos(const std::vector<double> & val) {
  this->pos = val;
}

void JointPt::__set_isCart(const int32_t val) {
  this->isCart = val;
}

uint32_t JointPt::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->robotId);
          this->__isset.robotId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sequence);
          this->__isset.sequence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time);
          this->__isset.time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pos.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->pos.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readDouble(this->pos[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.pos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->isCart);
          this->__isset.isCart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t JointPt::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("JointPt");

  xfer += oprot->writeFieldBegin("robotId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->robotId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sequence", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sequence);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pos", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->pos.size()));
    std::vector<double> ::const_iterator _iter5;
    for (_iter5 = this->pos.begin(); _iter5 != this->pos.end(); ++_iter5)
    {
      xfer += oprot->writeDouble((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isCart", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->isCart);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(JointPt &a, JointPt &b) {
  using ::std::swap;
  swap(a.robotId, b.robotId);
  swap(a.sequence, b.sequence);
  swap(a.time, b.time);
  swap(a.pos, b.pos);
  swap(a.isCart, b.isCart);
  swap(a.__isset, b.__isset);
}

JointPt::JointPt(const JointPt& other6) {
  robotId = other6.robotId;
  sequence = other6.sequence;
  time = other6.time;
  pos = other6.pos;
  isCart = other6.isCart;
  __isset = other6.__isset;
}
JointPt& JointPt::operator=(const JointPt& other7) {
  robotId = other7.robotId;
  sequence = other7.sequence;
  time = other7.time;
  pos = other7.pos;
  isCart = other7.isCart;
  __isset = other7.__isset;
  return *this;
}
void JointPt::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "JointPt(";
  out << "robotId=" << to_string(robotId);
  out << ", " << "sequence=" << to_string(sequence);
  out << ", " << "time=" << to_string(time);
  out << ", " << "pos=" << to_string(pos);
  out << ", " << "isCart=" << to_string(isCart);
  out << ")";
}


